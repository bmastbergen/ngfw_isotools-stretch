#!/bin/bash
#
# Do install stuff for amd64, including making bootable CDs
# Works with debian-installer
#
# $1 is the CD number
# $2 is the temporary CD build dir

. $BASEDIR/tools/boot/$DI_CODENAME/common.sh

set -e
#set -x

N=$1
CDDIR=$2
BOOTDIR=

#echo "DI_WWW_HOME is $DI_WWW_HOME"
#echo "DI_DIR is $DI_DIR"

if [ "$DI_WWW_HOME" = "default" ];then
   DI_WWW_HOME="http://people.debian.org/~aba/d-i/images/daily"
   if [ -n "$DI_DIR" ];then
      DI_DIR="$DI_DIR/~${DI_WWW_HOME#*~}"
      DI_WWW_HOME=""
      echo "Using images from $DI_DIR"
   fi
fi
if [ ! "$DI_DIST" ]; then
   DI_DIST="$DI_CODENAME"
fi

cd $CDDIR/..

# This script is called with $1 (now $N) as the CD to 
# make bootable.  N may be in the form "n" or "n_NONUS"
# There may be more than 4 disks...support extras.

# Strip NONUS part of disk number
# NN will be 1...N so it can be used as an index
NN=`echo $N | sed -e 's/_NONUS//'`

if [ "$NN" != "1" ]; then
  echo "CD$NN is not bootable"
  exit 0
fi

BOOT_IMAGES="cdrom/initrd.gz cdrom/vmlinuz cdrom/debian-cd_info.tar.gz"

# Download boot images.
for image in $BOOT_IMAGES; do
    if [ ! -e "$image" ]; then
	dir=$(dirname $image)
	mkdir -p $dir
	if [ -n "$LOCAL"  -a -f "${LOCALDEBS:-$MIRROR}/dists/$DI_DIST/local/installer-$ARCH/current/images/$image" ]; then
		cp "${LOCALDEBS:-$MIRROR}/dists/$DI_DIST/local/installer-$ARCH/current/images/$image" "$image"
	elif [ ! "$DI_WWW_HOME" ];then
		if [ ! "$DI_DIR" ];then
		   DI_DIR="$MIRROR/dists/$DI_DIST/main/installer-$ARCH/current/images"
		fi
#		echo "Copying images from $DI_DIR"
		cp "$DI_DIR/$image" "$image"
	else
		wget "$DI_WWW_HOME/$image" -O "$image"
	fi
    fi
done

echo "      Using ISOLINUX boot-disks image on CD$N"
mkdir -p boot$N/isolinux boot$N/isolinux-amd64 $CDDIR/install.amd
cp -lf cdrom/vmlinuz $CDDIR/install.amd/
cp -lf cdrom/initrd.gz $CDDIR/install.amd/

add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-J"
add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-cache-inodes"
add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-b isolinux/isolinux.bin"
add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-c isolinux/boot.cat"
add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-no-emul-boot"
add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-boot-load-size 4"
add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-boot-info-table"

syslinux_files () {
    type=$1

    mv boot$N/isolinux-amd64/f3.txt.$type boot$N/isolinux-amd64/f3.txt
    mv boot$N/isolinux-amd64/f4.txt.$type boot$N/isolinux-amd64/f4.txt
    mv boot$N/isolinux-amd64/isolinux.cfg.$type boot$N/isolinux-amd64/isolinux.cfg
}

extra_image () {
    image=$1
    dir=$(dirname "$image")

    mkdir -p $CDDIR/install.amd/$dir
    if [ ! -e $CDDIR/install.amd/"$image" ] ; then
	if [ ! "$DI_WWW_HOME" ] ; then
	    if [ ! "$DI_DIR" ] ; then
		DI_DIR="$MIRROR/dists/$DI_DIST/main/installer-$ARCH/current/images"
	    fi
	    cp "$DI_DIR/cdrom/$image" $CDDIR/install.amd/"$image"
	else
	    wget "$DI_WWW_HOME/cdrom/$image" -O $CDDIR/install.amd/"$image"
	fi
    fi

}

# Isolinux setup including config and help files comes from d-i.
cat cdrom/debian-cd_info.tar.gz | (cd boot$N/isolinux-amd64/; tar zx)
if [ -e boot$N/isolinux-amd64/f3.txt.withgtk ]; then
    extra_image gtk/initrd.gz
    syslinux_files withgtk
fi
rm -f boot$N/isolinux-amd64/isolinux.cfg.with* 2>/dev/null || true

sed -i "s|/install/|/install.amd/|" boot$N/isolinux-amd64/isolinux.cfg

mkdir -p $CDDIR/../syslinux
SYSLINUXDEB=`$BASEDIR/tools/which_deb $MIRROR $DI_CODENAME syslinux`
ar p "$MIRROR/${SYSLINUXDEB}" data.tar.gz | tar zxf - -C $CDDIR/../syslinux ./usr/lib
cp -f $CDDIR/../syslinux/usr/lib/syslinux/isolinux.bin boot$N/isolinux/

echo $SYSLINUXDEB >> $CDDIR/../$N.pkgs_extracted
$BASEDIR/tools/which_deb $MIRROR $DI_CODENAME syslinux source >> $CDDIR/../$N.pkgs_extracted

if [ -n "$KERNEL_PARAMS" ]; then
    # Substitute custom kernel params into the isolinux config
    # file.
    sed -i "s|append |append $KERNEL_PARAMS |" boot$N/isolinux-amd64/isolinux.cfg
fi

if [ -n "$ISOLINUX_DEFAULT" ]; then
    sed -i "s/^DEFAULT .*$/DEFAULT $ISOLINUX_DEFAULT/" boot$N/isolinux-amd64/isolinux.cfg
fi

# If the isolinux dir already exists, then we also have i386 and
# should merge. Otherwise, simply rename isolinux-amd64 into place
if [ -e boot$N/isolinux/isolinux.cfg ] ; then
	for file in boot$N/isolinux/f3.txt* boot$N/isolinux/f4.txt*
	do
		cat $file | awk '
			NR==3 { next }
			NR==5 { printf " (i386 is default; prepend 'amd64-' to use an amd64 kernel instead)\n" }
			/.*/  { print $0 }' > $file.tmp
		mv $file.tmp $file
	done

	cat boot$N/isolinux-amd64/isolinux.cfg | awk '
			/^LABEL/ { printf("LABEL amd64-%s\n", $2) }
			/^DEFAULT/ { printf("DEFAULT64 amd64-%s\n", $2) }
			/kernel/ { print $0 }
			/append/ { print $0 }' >> boot$N/isolinux/isolinux.cfg
else
	mv -f boot$N/isolinux-amd64/* boot$N/isolinux
fi

rm -rf boot$N/isolinux-amd64

if [ "$SPLASHPNG" ] ; then
	# Insert our own splash screen.  Color index 0 is
	# background, and index 7 is foreground.  Set to black and
	# white respecively
	pngtopnm < $SPLASHPNG | ppmquant 16 | \
		ppmtolss16 "#ffffff=7" "#000000=0" > boot$N/isolinux/splash.rle
fi

rm -rf cdrom
sed -i "s|built on|built $BUILD_DATE; d-i|" boot$N/isolinux/f1.txt

# Add autorun if we have README.html

if [ -f $CDDIR/README.html ]; then
	todos > $CDDIR/autorun.inf <<EOF
[autorun]
open=autorun.bat
EOF
	todos > $CDDIR/autorun.bat <<EOF
@echo Starting "README.html"...
@start README.html
@exit
EOF
fi

add_mkisofs_opt $CDDIR/../$N.mkisofs_dirs "boot$N"

# th,th, thats all
