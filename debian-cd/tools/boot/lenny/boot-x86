# This script gets sourced from boot-i386 and boot-amd64.
#
# Do install stuff for x86, including making bootable CDs
# Works with debian-installer
#
# $1 is the CD number
# $2 is the temporary CD build dir

. $BASEDIR/tools/boot/$DI_CODENAME/common.sh
. $BASEDIR/tools/boot/$DI_CODENAME/x86-desktop.sh

set -e
#set -x

N=$1
CDDIR=$2
BOOTDIR=
if [ "$DI_WWW_HOME" = "default" ];then
	if [ "$ARCH" = i386 ]; then
		DI_WWW_HOME="http://people.debian.org/~joeyh/d-i/images/daily"
	else
		DI_WWW_HOME="http://people.debian.org/~aba/d-i/images/daily"
	fi
	if [ -n "$DI_DIR" ];then
		DI_DIR="$DI_DIR/~${DI_WWW_HOME#*~}"
		DI_WWW_HOME=""                     
		echo "Using images from $DI_DIR"
	fi
fi
if [ ! "$DI_DIST" ]; then
	DI_DIST="$DI_CODENAME"
fi

cd $CDDIR/..

# This script is called with $1 (now $N) as the CD to 
# make bootable.  N may be in the form "n" or "n_NONUS"
# There may be more than 4 disks...support extras.

# Strip NONUS part of disk number
# NN will be 1...N so it can be used as an index
NN=`echo $N | sed -e 's/_NONUS//'`

# List of boot image types for each CD
KTYPE[1]="isolinux"
#KTYPE[2]="cdrom"
KTYPE[2]=""
KTYPE[3]=""
KTYPE[4]=""
KTYPE[5]=""
KTYPE[6]=""
KTYPE[7]=""
KTYPE[8]=""
KTYPE[9]=""
KTYPE[10]=""

THISTYPE=${KTYPE[$NN]}

# Exit if this is not a boot disk
[ -n "$THISTYPE" ] || exit 0

INSTALLDIR_i386="install.386"
INSTALLDIR_amd64="install.amd"

if [ "$ARCH" = i386 ]; then
	INSTALLDIR="$INSTALLDIR_i386"
else
	INSTALLDIR="$INSTALLDIR_amd64"
fi

BOOT_IMAGES="cdrom/initrd.gz cdrom/vmlinuz cdrom/debian-cd_info.tar.gz"
# Only include disk images on full CDs, not on smaller images.
#if [ "$ARCH" = i386 ] && [ "$INSTALLER_CD" != 1 ] && [ "$INSTALLER_CD" != 2 ]; then
	#DISK_IMAGES="floppy/cd-drivers.img floppy/boot.img floppy/root.img"
	#EXTRA_DISK_IMAGES="cdrom/boot.img"
#fi

# Download boot images.
for image in $BOOT_IMAGES; do
	if [ ! -e "$image" ]; then
		dir=$(dirname $image)
		mkdir -p $dir
		if [ -n "$LOCAL"  -a -f "${LOCALDEBS:-$MIRROR}/dists/$DI_DIST/local/installer-$ARCH/current/images/$image" ]; then
			cp "${LOCALDEBS:-$MIRROR}/dists/$DI_DIST/local/installer-$ARCH/current/images/$image" "$image"
		elif [ ! "$DI_WWW_HOME" ];then
			if [ ! "$DI_DIR" ];then
				DI_DIR="$MIRROR/dists/$DI_DIST/main/installer-$ARCH/current/images"
			fi
#			echo "Copying images from $DI_DIR"
			cp "$DI_DIR/$image" "$image"
		else
			wget "$DI_WWW_HOME/$image" -O "$image"
		fi
	fi
done

# Images that are not really required or may be unavailable.
for image in $DISK_IMAGES $EXTRA_DISK_IMAGES; do
	if [ ! -e "$image" ]; then
		dir=$(dirname $image)
		mkdir -p $dir
		if [ -n "$LOCAL"  -a -f "${LOCALDEBS:-$MIRROR}/dists/$DI_DIST/local/installer-$ARCH/current/images/$image" ]; then
			cp "${LOCALDEBS:-$MIRROR}/dists/$DI_DIST/local/installer-$ARCH/current/images/$image" "$image"
		elif [ ! "$DI_WWW_HOME" ];then
			if [ ! "$DI_DIR" ];then
				DI_DIR="$MIRROR/dists/$DI_DIST/main/installer-$ARCH/current/images"
			fi
			cp "$DI_DIR/$image" "$image" || true
		else
			wget "$DI_WWW_HOME/$image" -O "$image" || rm -f "$image"
		fi
	fi
done

# Only disk one gets the extra files installed
if [ "$NN" = "1" ]; then
	# populate the install directory as well
	for disk in $DISK_IMAGES $EXTRA_DISK_IMAGES; do
		if [ -e "$disk" ]; then
			dir=$(dirname $disk)
			mkdir -p $CDDIR/$INSTALLDIR/$dir
			cp -lf $disk $CDDIR/$INSTALLDIR/$dir
		fi
	done

	if [ -e "$MIRROR/tools" ] && \
	   [ ! -e $CDDIR/tools ] && \
	   [ "$OMIT_DOC_TOOLS" != "1" ] ; then
		echo "  Adding tools to CD1"
		$BASEDIR/tools/add_files $CDDIR $MIRROR tools
	fi
fi

extra_image () {
	image=$1
	dir=$(dirname "$image")

	mkdir -p $CDDIR/$INSTALLDIR/$dir
	if [ ! -e $CDDIR/$INSTALLDIR/"$image" ] ; then
		if [ ! "$DI_WWW_HOME" ] ; then
			if [ ! "$DI_DIR" ] ; then
				DI_DIR="$MIRROR/dists/$DI_DIST/main/installer-$ARCH/current/images"
			fi
			cp "$DI_DIR/cdrom/$image" $CDDIR/$INSTALLDIR/"$image"
		else
			wget "$DI_WWW_HOME/cdrom/$image" -O $CDDIR/$INSTALLDIR/"$image"
		fi
	fi
}

# If multiple desktops are to be supported, set the default one
ORIG_DESKTOP=
case "$DESKTOP" in
    gnome)
	# gnome is default in tasksel 
	DESKTOP=
	KERNEL_PARAMS="$(echo "$KERNEL_PARAMS" | \
		sed -r "s/desktop=[^ ]* ?//")"
	;;
    all)
	ORIG_DESKTOP=$DESKTOP
	DESKTOP=
	;;
    light)
	ORIG_DESKTOP=$DESKTOP
	DESKTOP=xfce
	;;
esac

if [ "$THISTYPE" = "isolinux" ]; then
	echo "  Using ISOLINUX boot-disks image on CD$N"
	mkdir -p $CDDIR/$INSTALLDIR
	cp -lf cdrom/vmlinuz $CDDIR/$INSTALLDIR/
	cp -lf cdrom/initrd.gz $CDDIR/$INSTALLDIR/

	mkdir -p $CDDIR/../syslinux
	SYSLINUXDEB=$(find_pkg_file syslinux)
	if [ -z "$SYSLINUXDEB" ]; then
		echo "ERROR: syslinux package is required" >&2
		exit 1
	fi
	(dpkg --fsys-tarfile "$MIRROR/$SYSLINUXDEB" | \
		tar xf - -C $CDDIR/../syslinux ./usr/lib)

	echo $SYSLINUXDEB >> $CDDIR/../$N.pkgs_extracted
	find_pkg_file syslinux source >> $CDDIR/../$N.pkgs_extracted

	add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-J -joliet-long"
	add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-cache-inodes"
	add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-b isolinux/isolinux.bin"
	add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-c isolinux/boot.cat"
	add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-no-emul-boot"
	add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-boot-load-size 4"
	add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-boot-info-table"	
	add_mkisofs_opt $CDDIR/../$N.mkisofs_dirs "boot$N"


	# In case of a multi-arch CD the script will be called two times.
	# The first time the isolinux dir gets set up for single arch; if
	# it is called a second time the isolinux dir already exists and we
	# know it will be multi-arch. We then throw away the first version
	# and just configure things from scratch for multi-arch.

	MULTIARCH=
	if [ -e boot$N/isolinux/isolinux.cfg ]; then
		MULTIARCH=1
		rm -r boot$N/isolinux
	fi

	mkdir -p boot$N/isolinux
	# Isolinux setup including config and help files comes from d-i.
	cat cdrom/debian-cd_info.tar.gz | (cd boot$N/isolinux/; tar zx)

	# Not everything in the tarball is isolinux stuff
	if [ -e boot$N/isolinux/win32-loader.ini ] ; then
		mv boot$N/isolinux/g2ldr* boot$N/isolinux/setup.exe \
			boot$N/isolinux/win32-loader.ini boot$N/
	fi

	if [ -e boot$N/isolinux/f3.txt.withgtk ]; then
		extra_image gtk/initrd.gz
		mv boot$N/isolinux/f3.txt.withgtk boot$N/isolinux/f3.txt
		mv boot$N/isolinux/f4.txt.withgtk boot$N/isolinux/f4.txt
		if [ -e boot$N/isolinux/isolinux.cfg.withgtk ]; then
			mv boot$N/isolinux/isolinux.cfg.withgtk boot$N/isolinux/isolinux.cfg
		fi
	else
		# Remove gtk isolinux config files.
		# FJP: AFAICT this is redundant: if f3.txt.withgtk is not
		# included then the *gtk* files will not be either.
		rm -f boot$N/isolinux/gtk.cfg
		rm -f boot$N/isolinux/amdgtk.cfg
		rm -f boot$N/isolinux/adgtk.cfg
		rm -f boot$N/isolinux/amdadgtk.cfg
	fi
	rm -f boot$N/isolinux/isolinux.cfg.with*

	# Modify win32-loader.ini for the "current" arch
	if [ -e boot$N/win32-loader.ini ]; then
		sed -i "s|install/|$INSTALLDIR/|" boot$N/win32-loader.ini
		if [ "${DESKTOP}" ] ; then
			sed -i "s|^\(default_desktop\)=.*|\1=${DESKTOP}|" boot$N/win32-loader.ini
		fi
	fi

	cp -f $CDDIR/../syslinux/usr/lib/syslinux/isolinux.bin boot$N/isolinux/
	cp -f $CDDIR/../syslinux/usr/lib/syslinux/vesamenu.c32 boot$N/isolinux/

	if [ -z "$MULTIARCH" ]; then
		# Set up isolinux dir for only the current arch
		for f in txt.cfg gtk.cfg adtxt.cfg adgtk.cfg; do
			if [ -e boot$N/isolinux/$f ]; then
				sed -i "s|/install/|/$INSTALLDIR/|" boot$N/isolinux/$f
			fi
		done

		# Remove the amd*.cfg files to avoid them being loaded on a
		# disc that does not have both amd64 and i386 dirs.
		rm -f boot$N/isolinux/amd*.cfg
	else
		# Set up isolinux dir for multi-arch
		for f in txt.cfg gtk.cfg adtxt.cfg adgtk.cfg; do
			if [ -e boot$N/isolinux/$f ]; then
				sed -i "s|/install/|/$INSTALLDIR_i386/|" boot$N/isolinux/$f
			fi
		done
		for f in amdtxt.cfg amdgtk.cfg amdadtxt.cfg amdadgtk.cfg; do
			if [ -e boot$N/isolinux/$f ]; then
				sed -i "s|/install/|/$INSTALLDIR_amd64/|" boot$N/isolinux/$f
			fi
		done

		for file in boot$N/isolinux/f3.txt* boot$N/isolinux/f4.txt*; do
			sed -i "4 s/^$/(note: i386 is default; prepend 'amd64-' to use an amd64 kernel instead)/" $file
		done

		# Modify win32-loader.ini to also cover the "other" arch
		if [ "$ARCH" = i386 ]; then
			sed -i -e "/^arch=/d
				   /^i386\//p; s/^i386/amd64/; s/=$INSTALLDIR_i386/=$INSTALLDIR_amd64/g" \
				boot$N/win32-loader.ini
		else
			sed -i -e "/^arch=/d
				   /^amd64\//p; s/^amd64/i386/; s/=$INSTALLDIR_amd64/=$INSTALLDIR_i386/g" \
				boot$N/win32-loader.ini
		fi

		# Workaround for #505243
		# Syslinux does not correctly handle a default64 option
		# in combination with vesamenu.
		# Instead, add special default label to automatically select
		# i386/amd64 if user hits enter from help screens.
		cp -f $CDDIR/../syslinux/usr/lib/syslinux/ifcpu64.c32 boot$N/isolinux/
		sed -i "/^default install/ s/^/#/" \
			boot$N/isolinux/txt.cfg || true
		sed -i "/^default64 amd64-install/ s/^/#/" \
			boot$N/isolinux/amdtxt.cfg || true
		sed -i "/^include menu.cfg/ a\include instsel.cfg" \
			boot$N/isolinux/prompt.cfg
		cat >boot$N/isolinux/instsel.cfg <<EOF
default install-select
label install-select
    kernel ifcpu64.c32
    append amd64-install -- install
EOF
		# Workaround for #505243 ends here
	fi

	if [ "$SPLASHPNG" ] ; then
		# Insert our own splash screen.  Color index 0 is
		# background, and index 7 is foreground.  Set to black and
		# white respecively
		pngtopnm < $SPLASHPNG | ppmquant 16 | \
			ppmtolss16 "#ffffff=7" "#000000=0" > boot$N/isolinux/splash.rle
	fi

	sed -i "s|built on|built $BUILD_DATE; d-i|" boot$N/isolinux/f1.txt

	if [ -n "$KERNEL_PARAMS" ]; then
		# Substitute custom kernel params into the isolinux config
		# file(s)
		for file in boot$N/isolinux/*.cfg; do
			case "$(basename $file)" in
			    instsel.cfg)
				continue ;;
			esac
			sed -i "/^[[:space:]]\+append .*--/ s|append|append $KERNEL_PARAMS|" \
				$file
		done
	fi

	case "$ORIG_DESKTOP" in
	    all)
		modify_for_all_desktop ;;
	    light)
		modify_for_light_desktop ;;
	esac
else
	if [ -n "$THISTYPE" ]; then
		echo "Using $THISTYPE boot-disks image on CD$N"
		mkdir -p boot$N/boot
		cp $THISTYPE/boot.img boot$N/boot/

		add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-J -joliet-long"
		add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-cache-inodes"
		add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-b boot/boot.img"
		add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-c boot/boot.catalog"
		add_mkisofs_opt $CDDIR/../$N.mkisofs_dirs "boot$N"
	else
		mkdir -p boot$N
		add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-J -joliet-long"
		add_mkisofs_opt $CDDIR/../$N.mkisofs_opts "-cache-inodes"
	fi
fi

# Add autorun
if [ -f boot$N/setup.exe ]; then
# when win32-loader is present, use that (it already checks for README.html)
	todos > $CDDIR/autorun.inf <<EOF
[autorun]
open=setup.exe
EOF
elif [ -f $CDDIR/README.html ]; then
	todos > $CDDIR/autorun.inf <<EOF
[autorun]
open=autorun.bat
EOF
	todos > $CDDIR/autorun.bat <<EOF
@echo Starting "README.html"...
@start README.html
@exit
EOF
fi

rm -rf cdrom floppy

# th,th, thats all
